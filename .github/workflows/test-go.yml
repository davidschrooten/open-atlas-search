name: Test Go

on:
  push:
    branches: [ master, develop ]
    paths-ignore:
      - 'charts/**'
      - 'clients/**'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'charts/**'
      - 'clients/**'
      - 'docs/**'
      - '*.md'
      - '.gitignore'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.24' ]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Install golint
      run: go install golang.org/x/lint/golint@latest

    - name: Run golint
      run: golint ./...

    - name: Run tests (with race detector)
      run: go test -race -coverprofile=coverage.out -covermode=atomic $(go list ./... | grep -v '/internal/cluster')
      
    - name: Run cluster tests (without race detector due to BoltDB compatibility)
      run: go test -coverprofile=coverage-cluster.out -covermode=atomic ./internal/cluster
      
    - name: Merge coverage reports
      run: |
        go install github.com/wadey/gocovmerge@latest
        $(go env GOPATH)/bin/gocovmerge coverage.out coverage-cluster.out > coverage-merged.out
        mv coverage-merged.out coverage.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build application
      run: go build -o open-atlas-search

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'

    - name: Create test config
      run: |
        cat > test-config.yaml << EOF
        server:
          host: "0.0.0.0"
          port: 8080
        
        mongodb:
          uri: "mongodb://localhost:27017"
          database: "testdb"
          timeout: 30
        
        search:
          index_path: "./test-indexes"
          batch_size: 100
          flush_interval: 5
          sync_state_path: "./test-sync-state.json"
        
        cluster:
          enabled: false
        
        indexes:
          - name: "test-index"
            database: "testdb"
            collection: "test-collection"
            definition:
              mappings:
                dynamic: true
                fields:
                  - name: "title"
                    field: "title"
                    type: "text"
                    analyzer: "standard"
        EOF

    - name: Test configuration loading
      run: ./open-atlas-search --config test-config.yaml --help

    - name: Test server startup (background)
      run: |
        ./open-atlas-search server --config test-config.yaml &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 5

    - name: Test health endpoint
      run: |
        curl -f http://localhost:8080/health || exit 1

    - name: Test indexes endpoint
      run: |
        curl -f http://localhost:8080/indexes || exit 1

    - name: Stop server
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

    - name: Clean up test files
      run: |
        rm -rf ./test-indexes ./test-sync-state.json test-config.yaml
